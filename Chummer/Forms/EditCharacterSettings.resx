<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>